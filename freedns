#!/usr/bin/env python

import datetime
import hashlib
import json
import os
import urllib.request


FREEDNS = {
        'username': 'peterjpierce',
        'password': 'Trying123f!',
        'subdomains': [
            'ppierce.mooo.com',
            'homarus.mooo.com',
            ]
        }

ENCODING = 'utf-8'
DATE_FORMAT = '%Y-%m-%d %H:%M:%S'
CACHE_FILE = os.path.join(os.environ['HOME'], '.%s.cache' % os.path.basename(__file__))


class Cache():
    """Create, read and update cache values."""

    def __init__(self, cache_path=CACHE_FILE):
        self.cache = self.get_cache()
        self.changed = False

    def __del__(self):
        """Persist any unsaved changes before being destroyed."""
        if self.changed:
            self.save()

    def ip_for(self, subdomain):
        """Get the currently cached IP address for a subdomain."""
        subcache = self._get_subdomain_node(subdomain)
        return subcache['ip']

    def update(self, subdomain, ipaddress):
        """Update the cache for a subdomain.

        As a minimum, this increments 'same_count' and 'checked', but if the
        ip address has changed, it updates all the fields for this entry.
        """
        self.changed = True
        subcache = self._get_subdomain_node(subdomain)
        now = datetime.datetime.now().strftime(DATE_FORMAT)

        if subcache['ip'] == ipaddress:
            subcache['same_count'] += 1
        else:
            subcache['ip'] = ipaddress
            subcache['new'] = now
            subcache['same_count'] = 0
        subcache['checked'] = now

    def save(self):
        """Persist the current cache back to the file system."""
        try:
            with open(CACHE_FILE, 'w') as f:
                json.dump(self.cache, f)
        except IOError as err:
            raise
        else:
            self.changed = False

    def get_cache(self):
        """Read cache from the file system."""
        try:
            with open(CACHE_FILE, 'r') as f:
                cache = json.load(f)
        except FileNotFoundError as err:
            cache = self._new_cache()
        return cache

    def _get_subdomain_node(self, subdomain):
        """Return the vector for a subdomain, instantiating if needed."""
        if not subdomain in self.cache['data']:
            self._new_subdomain(subdomain)
        return self.cache['data'][subdomain]

    def _new_cache(self):
        """Start a new cache from scratch."""
        cache = {'data': {}}
        for subdomain in FREEDNS['subdomains']:
            cache['data'][subdomain] = self._empty_vector()
        return cache

    def _new_subdomain(self, subdomain):
        """Add a new subdomain to the cache."""
        if subdomain in self.cache['data']:
            raise FreeDnsError('subcache %s already exists' % subdomain)
        else:
            self.cache['data'][subdomain] = self._empty_vector()
        return None

    def _empty_vector(self):
        return {'new': None, 'checked': None, 'ip': None, 'same_count': 0}

    def __str__(self):
        return str(self.cache)


class FreeDNS():
    """Check and update FreeDNS settings."""
    BASE = 'http://freedns.afraid.org'

    def __init__(self, username, password):
        self.authkey = self._derive_authkey(username, password)
        self.subdomains = {}
        self._refresh_subdomain_settings()

    def current_ip(self, subdomain):
        """Get the IP currently configured at FreeDNS."""
        return self.subdomains[subdomain]['ip']

    def update(self, subdomain):
        url = self.subdomains[subdomain]['update_url']
        with urllib.request.urlopen(url) as f:
            resp = f.read().decode(ENCODING)
        self._refresh_subdomain_settings()
        return self.current_ip(subdomain)

    def _refresh_subdomain_settings(self):
        """Get subdomains, current IP and tokenized URLs from FreeDNS.

        Note that you may not be managing all subdomains you discover here,
        just the ones configured at the top. This allows you to manage
        different subsets per calling location.
        """
        settings = {}
        call = '%s/api/?action=getdyndns&sha=%s' % (self.BASE, self.authkey)
        with urllib.request.urlopen(call) as f:
            for item in f:
                sub, ip, url = item.decode(ENCODING).split('|')
                settings[sub] = {'ip': ip, 'update_url': url}
        self.subdomains = settings

    def _derive_authkey(self, username, password):
        """Generate SHA1 digest of credentials in FreeDNS form."""
        msg = hashlib.sha1()
        msg.update(('%s|%s' % (username, password)).encode(ENCODING))
        return msg.hexdigest()


class FreeDnsError(Exception):
    """Raised for errors encountered in this module."""
    pass


def get_public_ip():
    with urllib.request.urlopen('http://plainip.com') as f:
        public_ip = f.read().decode(ENCODING)
    return public_ip


def run():

    cache = Cache()
    freedns = FreeDNS(FREEDNS['username'], FREEDNS['password'])
    public_ip = get_public_ip()

    for subdomain in FREEDNS['subdomains']:
        if not public_ip == freedns.current_ip(subdomain):
            updated = freedns.update(subdomain)
            print('updated FreeDNS for %s to %s' % (subdomain, updated))

            if not updated == public_ip:
                raise FreeDnsError('FreeDNS not updated to %s' % public_ip)

        cache.update(subdomain, public_ip)

    cache.save()


if __name__== '__main__':
    run()
