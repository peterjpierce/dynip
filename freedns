#!/usr/bin/env python

"""
freedns

Manage your dynamic IP (DNS) settings for one or more subdomains at FreeDNS.

Run with --help to see usage instructions.

The tool has two primary modes:
 - update
 - status

Running with no arguments (or 'update') checks your current public IP
address against settings at FreeDNS and makes updates as needed.

You may optionally use --domain to limit this operation to just one of
your configured subdomains.

The tool also keeps a cache of recent statistics (in $HOME/.freedns.cache)
that you can review using argument 'status', which provides tabular
output showing IP address and dates for last-changed and last-checked per
subdomain.

When configuring below, you do not need to provide the special SHA1 and
URL keys discussed at FreeDNS and needed by other tools (they are handled
for you).  Subdomains may be separated by any type of whitespace,
including newlines.

by: Peter Pierce <peterjpierce@gmail.com>
"""

# Configure here only
FREEDNS_USERNAME = 'xxxxxxxxxxxxx'
FREEDNS_PASSWORD = 'yyyyyyyyyyy'
FREEDNS_SUBDOMAINS = """
        xyz.mooo.com
        abc.afraid.org
"""

import argparse
import datetime
import hashlib
import json
import os

try:
    from urllib.request import urlopen
# backward compatibility for Python 2.7
except ImportError as err:
    from urllib2 import urlopen
    FileNotFoundError = IOError

ENCODING = 'utf-8'
DATE_FORMAT = '%Y-%m-%d %H:%M:%S'
CACHE_FILE = os.path.join(os.environ['HOME'], '.%s.cache' % os.path.basename(__file__))


class Cache():
    """Create, read and update cache values."""

    def __init__(self, cache_path=CACHE_FILE):
        self.changed = False
        self.cache_path = cache_path
        self.cache = self.get_cache()

    def __del__(self):
        """Persist any unsaved changes before being destroyed."""
        if self.changed:
            self.save()

    def ip_for(self, subdomain):
        """Get the currently cached IP address for a subdomain."""
        subcache = self._get_subdomain_node(subdomain)
        return subcache['ip']

    def update(self, subdomain, ipaddress):
        """Update the cache for a subdomain.

        As a minimum, this increments 'same_count' and 'checked', but if the
        ip address has changed, it updates all the fields for this entry.
        """
        self.changed = True
        subcache = self._get_subdomain_node(subdomain)
        now = datetime.datetime.now().strftime(DATE_FORMAT)

        if subcache['ip'] == ipaddress:
            subcache['same_count'] += 1
        else:
            subcache['ip'] = ipaddress
            subcache['new'] = now
            subcache['same_count'] = 0
        subcache['checked'] = now

    def save(self):
        """Persist the current cache back to the file system."""
        try:
            with open(self.cache_path, 'w') as f:
                json.dump(self.cache, f)
        except IOError as err:
            raise
        else:
            self.changed = False

    def get_cache(self):
        """Read cache from the file system."""
        try:
            with open(self.cache_path, 'r') as f:
                cache = json.load(f)
        except FileNotFoundError as err:
            cache = self._new_cache()
        return cache

    def _get_subdomain_node(self, subdomain):
        """Return the vector for a subdomain, instantiating if needed."""
        if not subdomain in self.cache['data']:
            self._new_subdomain(subdomain)
        return self.cache['data'][subdomain]

    def _new_cache(self):
        """Start a new cache from scratch."""
        cache = {'data': {}}
        for subdomain in SUBDOMAINS:
            cache['data'][subdomain] = self._empty_vector()
        return cache

    def _new_subdomain(self, subdomain):
        """Add a new subdomain to the cache."""
        if subdomain in self.cache['data']:
            raise FreeDnsError('subcache %s already exists' % subdomain)
        else:
            self.cache['data'][subdomain] = self._empty_vector()
        return None

    def _empty_vector(self):
        return {'new': None, 'checked': None, 'ip': None, 'same_count': 0}

    def __str__(self):
        return str(self.cache)


class FreeDNS():
    """Check and update FreeDNS settings."""
    BASE = 'http://freedns.afraid.org'

    def __init__(self, username, password):
        self.authkey = self._derive_authkey(username, password)
        self.subdomains = {}
        self._refresh_subdomain_settings()

    def current_ip(self, subdomain):
        """Get the IP currently configured at FreeDNS."""
        return self.subdomains[subdomain]['ip']

    def update(self, subdomain):
        url = self.subdomains[subdomain]['update_url']
        f = urlopen(url)
        resp = f.read().decode(ENCODING)
        f.close()
        self._refresh_subdomain_settings()
        return self.current_ip(subdomain)

    def _refresh_subdomain_settings(self):
        """Get subdomains, current IP and tokenized URLs from FreeDNS.

        Note that you may not be managing all subdomains you discover here,
        just the ones configured at the top. This allows you to manage
        different subsets per calling location.
        """
        settings = {}
        call = '%s/api/?action=getdyndns&sha=%s' % (self.BASE, self.authkey)
        f = urlopen(call)
        for item in f:
            sub, ip, url = item.decode(ENCODING).split('|')
            settings[sub] = {'ip': ip, 'update_url': url}
        f.close()
        self.subdomains = settings

    def _derive_authkey(self, username, password):
        """Generate SHA1 digest of credentials in FreeDNS form."""
        msg = hashlib.sha1()
        msg.update(('%s|%s' % (username, password)).encode(ENCODING))
        return msg.hexdigest()


class FreeDnsError(Exception):
    """Raised for errors encountered in this module."""
    pass


def get_public_ip():
    f = urlopen('http://plainip.com')
    public_ip = f.read().decode(ENCODING)
    f.close()
    return public_ip


def setup():
    """Gather args and set globals."""
    global SUBDOMAINS
    SUBDOMAINS = FREEDNS_SUBDOMAINS.split()

    parser = argparse.ArgumentParser(description='Process FreeDNS updates')
    parser.add_argument(
            'task', default='update', choices=['update', 'status'],
            nargs='?', help='update FreeDNS or view status (default=update)')
    parser.add_argument(
            '-d', '--domain',  choices=SUBDOMAINS, metavar='DOMAIN',
            help='limit update to one domain')
    return parser.parse_args()


def build_status(cache_data):
    """Provide status table as a string for printing to the console."""
    spacer = '  '
    headings = spacer.join([
            '{0:<30}'.format('subdomain'),
            '{0:<15}'.format('IP-last-check'),
            '{0:<19}'.format('last-checked'),
            '{0:<19}'.format('unchanged-since'),
            '{0:>12}'.format('checks-since'),
            ])
    divider = '-' * len(headings)
    row_format = spacer.join([
            '{subdomain:<30}',
            '{ip:<15}',
            '{checked:<19}',
            '{new:>19}',
            '{same_count:>12}',
            ])
    table = [headings, divider]
    for subdomain in sorted(cache_data['data'].keys()):
        data = dict(cache_data['data'][subdomain])
        data['subdomain'] = subdomain
        table.append(row_format.format(**data))
    return '\n'.join(table)


def run():

    args = setup()
    cache = Cache()
    public_ip = get_public_ip()

    if 'update' in args.task:
        freedns = FreeDNS(FREEDNS_USERNAME, FREEDNS_PASSWORD)

        for subdomain in SUBDOMAINS:
            if args.domain and not subdomain == args.domain:
                continue

            if not public_ip == freedns.current_ip(subdomain):
                updated = freedns.update(subdomain)
                print('updated FreeDNS for %s to %s' % (subdomain, updated))

                if not updated == public_ip:
                    raise FreeDnsError('FreeDNS not updated to %s' % public_ip)

            cache.update(subdomain, public_ip)
        cache.save()

    elif 'status' in args.task:
        cached_data = cache.get_cache()
        status = build_status(cached_data)
        print(status)


if __name__== '__main__':
    run()
